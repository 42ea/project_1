debug=False

import numpy as np
if debug:
    import matplotlib.pyplot as plt

import curve_handler as p

CONTROL = np.array([[-12.73564, 9.03455],
[-26.77725, 15.89208],
[-42.12487, 20.57261],
[-15.34799, 4.57169],
[-31.72987, 6.85753],
[-49.14568, 6.85754],
[-38.09753, -1e-05],
[-67.92234, -11.10268],
[-89.47453, -33.30804],
[-21.44344, -22.31416],
[-32.16513, -53.33632],
[-32.16511, -93.06657],
[-2e-05, -39.83887],
[10.72167, -70.86103],
[32.16511, -93.06658],
[21.55219, -22.31397],
[51.377, -33.47106],
[89.47453, -33.47131],
[15.89191, 0.00025],
[30.9676, 1.95954],
[45.22709, 5.87789],
[14.36797, 3.91883],
[27.59321, 9.68786],
[39.67575, 17.30712]])
KNOTS = np.linspace(0,1,26)
KNOTS[ 1] = KNOTS[ 2] = KNOTS[ 0]
KNOTS[-3] = KNOTS[-2] = KNOTS[-1]


cp = np.array([[ 15, 4], [23, -5], [35, 39], [25, 20], [15, 10], [10, 5], [6, 3], [2, 1],[1,0]])
knots = np.linspace(0,1,11)
knots[ 1] = knots[ 2] = knots[ 0]
knots[-3] = knots[-2] = knots[-1]

data_x = np.array([1,10,20,30,28,25,15,10,5])
data_y = np.array([1,-1,15,25,30,35,15,10,5])

if debug:
    plt.plot(data_x,data_y,'go')
    plt.title('Data points')
    plt.show()
    
interpol = np.column_stack((data_x,data_y))
print(np.shape(interpol)[1])
cd = p.CurveDesigner(d_vector=cp,u_vector=knots, interpolation_points=interpol)

if debug:
    Ni = (len(cd.u_vector)-2)*[None]
    for j in range(len(cd.u_vector)-2):
        Ni[j] = cd.basis_func(j)
    utest = np.linspace(min(cd.u_vector)+0.001,max(cd.u_vector)-0.001,100)
    for i in range(len(cd.u_vector)-2):
        Nevald = np.zeros(len(utest))
        Nevald2 = np.zeros(len(cd.xi))
        Nii = Ni[i]
        for j in range(len(utest)):
            Nevald[j]=Nii(utest[j])
        for j in range(len(cd.xi)):
            Nevald2[j]=Nii(cd.xi[j])

        plt.plot(utest,Nevald)
        plt.plot(cd.xi,Nevald2,'ro')
        plt.title('N_'+str(i))
        plt.show()

spline = cd.generateSpline(5000,mode='interpolate')
   
#Plot s(u) and control points using points generated by the deBoor-algorithm

cd.plot(spline, cd.d_vector, control = True, interpolate = True)

basisspline = cd.splineFromBasisFunc(5000)

blossoms1, blossoms2, control_point, d43 = cd.generateBlossoms(0.344)
#cd.plot(spline, cd.d_vector, control = True, blossom = True, blossoms1 = blossoms1, blossoms2 = blossoms2, control_point = control_point, d43 = d43)
#Plot s(u) and control points using points generated by basis function multiplication and summation
#cd.plot(basisspline, cd.d_vector, control = True)


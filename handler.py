debug=False

import numpy as np
if debug:
    import matplotlib.pyplot as plt

import curve_handler as p

knots = np.linspace(0,1,11)
knots[ 1] = knots[ 2] = knots[ 0]
knots[-3] = knots[-2] = knots[-1]

data_x = np.array([1,10,20,30,28,25,15,10,5])
data_y = np.array([1,-1,15,25,30,35,15,10,5])

if debug:
    plt.plot(data_x,data_y,'go')
    plt.title('Data points')
    plt.show()
    
interpol = np.column_stack((data_x,data_y))
cd = p.CurveDesigner(u_vector=knots, data_points=interpol)

if debug:
    Ni = (len(cd.u_vector)-2)*[None]
    for j in range(len(cd.u_vector)-2):
        Ni[j] = cd.basis_func(j)
    utest = np.linspace(min(cd.u_vector)+0.001,max(cd.u_vector)-0.001,100)
    for i in range(len(cd.u_vector)-2):
        Nevald = np.zeros(len(utest))
        Nevald2 = np.zeros(len(cd.xi))
        Nii = Ni[i]

        for j in range(len(utest)):
            Nevald[j]=Nii(utest[j])
        for j in range(len(cd.xi)):
            Nevald2[j]=Nii(cd.xi[j])

        plt.plot(utest,Nevald)
        plt.plot(cd.xi,Nevald2,'ro')
        plt.title('N_'+str(i))
        plt.show()

spline = cd.generate_spline(5000,interpolate=True)
   
#Plot s(u) and control points using points generated by the deBoor-algorithm
cd.plot(spline, cd.d_vector, control = True, interpolate = True)
basisspline = cd.spline_from_basis_func(5000)

blossoms1, blossoms2, control_point, d43 = cd.generate_blossoms(knots[7]) #0.344
cd.plot(spline, cd.d_vector, control = True, blossom = True, blossoms1 = blossoms1, blossoms2 = blossoms2, control_point = control_point, d43 = d43)
#Plot s(u) and control points using points generated by basis function multiplication and summation
#cd.plot(basisspline, cd.d_vector, control = True)

